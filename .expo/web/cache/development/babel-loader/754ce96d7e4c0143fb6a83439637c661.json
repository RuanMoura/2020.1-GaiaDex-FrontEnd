{"ast":null,"code":"function _normalize(path) {\n  valid(path);\n  return (path + \"/\").split(/\\/+/g).reduce(function (previous, current) {\n    if (!Array.isArray(previous)) previous = [previous];\n    if (current === '.') return previous;\n    if (current === '..') previous.pop();else if (current.length) previous.push(current);\n    return previous;\n  }).join('/');\n}\n\nfunction _basename(path, ext) {\n  var basename = path.split(/\\//g).pop();\n\n  if (ext) {\n    var tmp = basename.split(/\\./g);\n\n    var _ext = tmp.pop();\n\n    if (ext === _ext || ext.slice(1) === _ext) {\n      return tmp.join('.');\n    }\n  }\n\n  return basename;\n}\n\nfunction _dirname(path) {\n  return path.split(/\\//g).slice(0, -1).join('/');\n}\n\nfunction _extname(path) {\n  var tmp = path.replace(/^[\\.]+/, '');\n  if (/\\./.test(tmp)) return tmp.match(/\\.[^.]*$/)[0];\n  return '';\n}\n\nfunction _format(options) {\n  var dir = options.dir,\n      root = options.root,\n      base = options.base,\n      name = options.name,\n      ext = options.ext;\n\n  var _dir = dir || root;\n\n  var _base = base || \"\" + (name || '') + (/^\\./.test(ext) ? '' : '.') + (ext || '');\n\n  return normalize(_dir + \"/\" + _base);\n}\n\nfunction _isAbsolute(path) {\n  return /^\\//.test(path);\n}\n\nfunction _parse(path) {\n  var obj = {},\n      tmp;\n  var components = path.split(/\\//g);\n  obj.base = components.pop();\n  obj.dir = components.join('/');\n\n  if (/^\\//.test(obj.dir)) {\n    obj.root = '/';\n  }\n\n  if (obj.base != undefined) {\n    tmp = obj.base.replace(/^[\\.]+/, '');\n\n    if (/\\./.test(tmp)) {\n      obj.ext = tmp.match(/\\.[^.]*$/)[0];\n      obj.name = obj.base.slice(0, -obj.ext.length);\n    } else {\n      obj.name = obj.base;\n    }\n  } else {\n    delete obj.base;\n  }\n\n  return obj;\n}\n\nfunction _resolve(segments) {\n  var flat = segments.reduce(function (previous, current) {\n    if (!Array.isArray(previous)) previous = [previous];\n    if (Array.isArray(current)) Array.prototype.push.apply(previous, current);\n    Array.prototype.push.call(previous, current);\n    return previous;\n  }).reduce(function (previous, current) {\n    if (/^\\//.test(current)) return current;\n    return previous + \"/\" + current;\n  });\n  return _normalize(flat);\n}\n\nfunction _relative(base, path) {\n  base = base.split(/\\//g);\n  path = path.split(/\\//g);\n\n  while (base[0] === path[0]) {\n    base.shift();\n    path.shift();\n  }\n\n  return Array(base.length).fill('..').concat(path).join('/');\n}\n\nfunction valid(path) {\n  if (typeof path != 'string') {\n    throw new TypeError('path must be string.');\n  }\n}\n\nmodule.exports = exports = {\n  normalize: function normalize(path) {\n    return _normalize(path);\n  },\n  basename: function basename(path, ext) {\n    return _basename(_normalize(path), ext);\n  },\n  dirname: function dirname(path) {\n    return _dirname(_normalize(path));\n  },\n  extname: function extname(path) {\n    return _extname(_normalize(path));\n  },\n  format: function format(options) {\n    return _format(options);\n  },\n  isAbsolute: function isAbsolute(path) {\n    return _isAbsolute(valid(path));\n  },\n  parse: function parse(path) {\n    return _parse(_normalize(path));\n  },\n  resolve: function resolve() {\n    return _resolve.call({}, Array.prototype.slice.call(arguments, 0));\n  },\n  relative: function relative(base, path) {\n    return _relative(_normalize(base), _normalize(path));\n  }\n};","map":{"version":3,"sources":["/home/v100k/git/2020.1-GaiaDex-FrontEnd/node_modules/react-native-path/index.js"],"names":["_normalize","path","valid","split","reduce","previous","current","Array","isArray","pop","length","push","join","_basename","ext","basename","tmp","_ext","slice","_dirname","_extname","replace","test","match","_format","options","dir","root","base","name","_dir","_base","normalize","_isAbsolute","_parse","obj","components","undefined","_resolve","segments","flat","prototype","apply","call","_relative","shift","fill","concat","TypeError","module","exports","dirname","extname","format","isAbsolute","parse","resolve","arguments","relative"],"mappings":"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","sourcesContent":["/**\npath.basename(path[, ext])\npath.dirname(path)\npath.extname(path)\npath.format(pathObject)\npath.isAbsolute(path)\npath.join([...paths])\npath.normalize(path)\npath.parse(path)\npath.relative(from, to)\npath.resolve([...paths])\npath.sep\n*/\n\nfunction _normalize(path) {\n  valid(path);\n  return `${path}/`.split(/\\/+/g).reduce((previous, current) => {\n    if (!Array.isArray(previous)) previous = [previous];\n    if (current === '.') return previous;\n    if (current === '..') previous.pop();\n    else if (current.length) previous.push(current);\n    return previous;\n  }).join('/');\n}\n\nfunction _basename(path, ext) {\n  var basename = path.split(/\\//g).pop();\n  if (ext) {\n    var tmp = basename.split(/\\./g);\n    var _ext = tmp.pop();\n    if (ext === _ext || ext.slice(1) === _ext) {\n      return tmp.join('.')\n    }\n  }\n  return basename;\n}\n\nfunction _dirname(path) {\n  return path.split(/\\//g).slice(0, -1).join('/')\n}\n\nfunction _extname(path) {\n  var tmp = path.replace(/^[\\.]+/, '');\n  if (/\\./.test(tmp)) return tmp.match(/\\.[^.]*$/)[0];\n  return '';\n}\n\nfunction _format(options) {\n  var {\n    dir,\n    root,\n    base,\n    name,\n    ext\n  } = options;\n  var _dir = dir || root;\n  var _base = base || `${name || ''}${/^\\./.test(ext) ? '' : '.'}${ext || ''}`;\n  return normalize(`${_dir}/${_base}`);\n}\n\nfunction _isAbsolute(path) {\n  return /^\\//.test(path)\n}\n\nfunction _parse(path) {\n  var obj = {},\n    tmp;\n  var components = path.split(/\\//g)\n  obj.base = components.pop();\n  obj.dir = components.join('/');\n  if (/^\\//.test(obj.dir)) {\n    obj.root = '/';\n  }\n  if (obj.base != undefined) {\n    tmp = obj.base.replace(/^[\\.]+/, '');\n    if (/\\./.test(tmp)) {\n      obj.ext = tmp.match(/\\.[^.]*$/)[0];\n      obj.name = obj.base.slice(0, -obj.ext.length);\n    } else {\n      obj.name = obj.base\n    }\n  } else {\n    delete obj.base\n  }\n  return obj;\n}\n\nfunction _resolve(segments) {\n  var flat = segments.reduce((previous, current) => {\n    if (!Array.isArray(previous)) previous = [previous];\n    if (Array.isArray(current)) Array.prototype.push.apply(previous, current);\n    Array.prototype.push.call(previous, current);\n    return previous;\n  }).reduce((previous, current) => {\n    if (/^\\//.test(current)) return current;\n    return `${previous}/${current}`;\n  });\n  return _normalize(flat);\n}\n\nfunction _relative(base, path) {\n  base = base.split(/\\//g);\n  path = path.split(/\\//g);\n\n  while(base[0] === path[0]) {\n    base.shift();\n    path.shift();\n  }\n\n  return Array(base.length).fill('..').concat(path).join('/');\n}\n\nfunction valid(path) {\n  if (typeof path != 'string') {\n    throw new TypeError('path must be string.');\n  }\n}\n\n\nmodule.exports = exports = {\n  normalize(path) {\n    return _normalize(path);\n  },\n  basename(path, ext) {\n    return _basename(_normalize(path), ext);\n  },\n  dirname(path) {\n    return _dirname(_normalize(path));\n  },\n  extname(path) {\n    return _extname(_normalize(path))\n  },\n  format(options) {\n    return _format(options);\n  },\n  isAbsolute(path) {\n    return _isAbsolute(valid(path))\n  },\n  parse(path) {\n    return _parse(_normalize(path))\n  },\n  resolve() {\n    return _resolve.call({}, Array.prototype.slice.call(arguments, 0));\n  },\n  relative(base, path) {\n    return _relative(_normalize(base), _normalize(path))\n  }\n}"]},"metadata":{},"sourceType":"script"}